{"version":3,"sources":["scripts/main.js"],"names":["root","document","querySelector","allRowsField","querySelectorAll","btnStart","messageFooter","gameScore","widthField","children","length","field","createarrField","arr","column","m","push","i","count","updateHtml","map","cell","index","textContent","className","randomNumber","min","max","Math","ceil","random","cauntFreeCell","y","changeCellValue","numberChange","freeCell","valueCell","k","changeHidden","messegeClass","classList","remove","startGame","add","removeField","message","addEventListener","validTwoRows","arrNext","valid","some","num","possibilityMove","newArrMergeX","newArrMergeY","merge","move","arrCell","direction","arrNotFreeCell","filter","reverse","window","e","startY","targetTouches","clientY","startX","clientX","ontouchend","event","endX","changedTouches","endY","oneSteep","nameEvent","validMove","newArr","startFuncMove","row","columnField","code"],"mappings":"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","file":"main.40859243.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst root = document.querySelector('.container');\n\nconst allRowsField = root.querySelectorAll('tbody tr');\nconst btnStart = root.querySelector('.start');\nconst messageFooter = root.querySelector('.message-container');\nconst gameScore = root.querySelector('.game-score');\nconst widthField = allRowsField[0].children.length;\n\nconst field = [];\n\nconst createarrField = (arr, column) => {\n  for (let m = 0; m < column; m++) {\n    arr.push([]);\n\n    for (let i = 0; i < widthField; i++) {\n      arr[m].push([]);\n\n      for (let count = 0; count < widthField; count++) {\n        arr[m][i].push('');\n      }\n    }\n  }\n};\n\ncreatearrField(field, 2);\n\nconst updateHtml = () => {\n  for (let i = 1; i <= widthField; i++) {\n    [...root.querySelectorAll(`tr :nth-child(${i})`)].map((cell, index) => {\n      cell.textContent = field[1][i - 1][index];\n      cell.className = `field-cell field-cell--${cell.textContent}`;\n    });\n  }\n};\n\nconst randomNumber = (min = 0, max = (widthField * widthField)) => {\n  return Math.ceil(Math.random() * (max - min) + min);\n};\n\nconst cauntFreeCell = () => {\n  let count = 0;\n\n  for (let i = 0; i < field[1].length; i++) {\n    for (let y = 0; y < field[1][i].length; y++) {\n      if (!field[1][i][y]) {\n        count++;\n      }\n    }\n  }\n\n  return count;\n};\n\nconst changeCellValue = (numberChange) => {\n  for (let i = 0; i < numberChange; i++) {\n    const freeCell = cauntFreeCell();\n\n    if (freeCell < 1) {\n      return;\n    }\n\n    const random = randomNumber(0, freeCell);\n\n    const valueCell = randomNumber(0, 10) > 9 ? 4 : 2;\n\n    let count = 0;\n\n    for (let k = 0; k < field[1].length; k++) {\n      for (let y = 0; y < field[1][k].length; y++) {\n        if (!field[1][k][y]) {\n          count++;\n\n          if (count === random) {\n            field[1][k][y] = valueCell;\n            field[0][y][k] = valueCell;\n          }\n        }\n      }\n    }\n    updateHtml();\n  }\n};\n\nconst changeHidden = (messegeClass) => {\n  root.querySelector(`.${messegeClass}`).classList.remove('hidden');\n};\n\nconst startGame = () => {\n  btnStart.textContent = 'Restart';\n  btnStart.classList.add('restart');\n  gameScore.textContent = 0;\n\n  removeField();\n  changeCellValue(2);\n\n  [...messageFooter.children].map(message => {\n    message.classList.add('hidden');\n  });\n};\n\nbtnStart.addEventListener('click', () => startGame());\n\nconst validTwoRows = (arr, arrNext) => {\n  let valid = false;\n\n  if (arr.some((num, index) => num !== arrNext[index])) {\n    valid = true;\n  }\n\n  return valid;\n};\n\nconst possibilityMove = () => {\n  if (cauntFreeCell() > 0) {\n    return true;\n  }\n\n  for (let i = 1; i <= widthField; i++) {\n    const newArrMergeX = [...field[0][i - 1]];\n    const newArrMergeY = [...field[1][i - 1]];\n\n    merge(newArrMergeX);\n    merge(newArrMergeY);\n\n    if (validTwoRows(newArrMergeX, field[0][i - 1]) ||\n      validTwoRows(newArrMergeY, field[1][i - 1])) {\n      return true;\n    }\n  }\n  changeHidden('message-lose');\n};\n\nconst removeField = () => {\n  for (let i = 0; i < field[1].length; i++) {\n    for (let y = 0; y < field[1][i].length; y++) {\n      field[1][i][y] = '';\n      field[0][y][i] = '';\n    }\n  }\n\n  updateHtml();\n};\n\nfunction move(arrCell, direction, column) {\n  const arrNotFreeCell = [...arrCell].filter((cell) => {\n    return cell;\n  });\n\n  for (let i = 0; i < arrCell.length; i++) {\n    if (i >= arrNotFreeCell.length) {\n      arrCell[i] = '';\n      continue;\n    }\n\n    arrCell[i] = arrNotFreeCell[i];\n  }\n\n  if (direction === 'toRight' || direction === 'toDown') {\n    arrCell.reverse();\n  }\n\n  for (let i = 0; i < 4; i++) {\n    field[column][i].map((num, index) => {\n      field[+!column][index][i] = num;\n    });\n  }\n  updateHtml();\n};\n\nfunction merge(arrCell) {\n  for (let i = 1; i < arrCell.length; i++) {\n    if (arrCell[i - 1] === arrCell[i] && arrCell[i]) {\n      arrCell[i - 1] = +arrCell[i - 1] * 2;\n      arrCell[i] = '';\n\n      gameScore.textContent = +gameScore.textContent + (+arrCell[i - 1]);\n\n      if (arrCell[i - 1] === '2048') {\n        changeHidden('message-win');\n      }\n    }\n  }\n};\n\nwindow.addEventListener('touchstart', (e) => {\n  let startY = e.targetTouches['0'].clientY;\n  let startX = e.targetTouches['0'].clientX;\n\n  window.ontouchend =  (event) => {\n    let endX = event.changedTouches['0'].clientX;\n    let endY = event.changedTouches['0'].clientY;\n\n    if (endY - startY > 130) {\n      oneSteep('ArrowDown')\n    }\n    \n    if (startY - endY > 130) {\n      oneSteep('ArrowUp')\n    }\n\n    if (startX - endX > 130) {\n      oneSteep('ArrowLeft')\n    }\n\n    if (endX - startX > 130) {\n      oneSteep('ArrowRight')\n    }\n  };\n})\n\n\nconst oneSteep = (nameEvent) => {\n\n  let validMove = false;\n  let newArr;\n\n  const startFuncMove = (row, columnField, direction = '') => {\n    newArr = [...row];\n    move(row, direction, columnField);\n    merge(row);\n    move(row, direction, columnField);\n\n    if (validTwoRows(newArr, row)) {\n      validMove = true;\n    };\n  };\n\n  for (let i = 1; i <= widthField; i++) {\n    switch (nameEvent) {\n      case 'ArrowUp':\n        startFuncMove(field[1][i - 1], 1);\n        break;\n\n      case 'ArrowDown':\n        startFuncMove(field[1][i - 1], 1, 'toDown');\n        break;\n\n      case 'ArrowLeft':\n        startFuncMove(field[0][i - 1], 0, 'toLeft');\n        break;\n\n      case 'ArrowRight':\n        startFuncMove(field[0][i - 1], 0, 'toRight');\n        break;\n    }\n  }\n\n  possibilityMove();\n\n  if (validMove) {\n    changeCellValue(1);\n  }\n};\n\nwindow.addEventListener('keydown', (e) => {\n  if (e.code === 'ArrowUp' || e.code === 'ArrowDown' ||\n    e.code === 'ArrowLeft' || e.code === 'ArrowRight') {\n    oneSteep(e.code)\n  }\n});\n"]}